{"remainingRequest":"C:\\Users\\Ron Elnekave\\Desktop\\spotifood\\oved\\spotifood\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Ron Elnekave\\Desktop\\spotifood\\oved\\spotifood\\frontend\\node_modules\\vue-functional-calendar\\src\\components\\FunctionalCalendar.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Ron Elnekave\\Desktop\\spotifood\\oved\\spotifood\\frontend\\node_modules\\vue-functional-calendar\\src\\components\\FunctionalCalendar.vue","mtime":1553793675125},{"path":"C:\\Users\\Ron Elnekave\\Desktop\\spotifood\\oved\\spotifood\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Ron Elnekave\\Desktop\\spotifood\\oved\\spotifood\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Ron Elnekave\\Desktop\\spotifood\\oved\\spotifood\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Ron Elnekave\\Desktop\\spotifood\\oved\\spotifood\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport helpCalendar from '../assets/js/calendar'\nimport {propsAndData} from \"../mixins/propsAndData\";\n\nexport default {\n    name: \"FunctionalCalendar\",\n    mixins: [propsAndData],\n    created() {\n        this.setConfigs();\n        this.initCalendar();\n\n        if (this.fConfigs.isModal) {\n            // Event\n            window.addEventListener('click', (e) => {\n                if (!this.$el.contains(e.target)) {\n                    this.showCalendar = false\n                }\n            });\n        }\n    },\n    mounted() {\n        // Reacts to external selected dates\n        this.$watch('value', function (value) {\n            if (this.fConfigs.isDateRange) {\n                this.calendar.dateRange.start = value.dateRange.start || false;\n                this.calendar.dateRange.end = value.dateRange.end || false\n            } else {\n                this.calendar.selectedDate = value.selectedDate || false\n            }\n        }, {deep: true});\n\n        this.$watch('showCalendar', function (value) {\n            if (value)\n                this.$emit('opened');\n            else\n                this.$emit('closed');\n        }, {immediate: true, deep: true})\n    },\n    computed: {\n        yearList() {\n            let years = [];\n            let year = this.calendar.currentDate.getFullYear() - 4;\n            for (let i = 0; i < 12; i++) {\n                let finalYear = year + i;\n\n                let selected = false;\n\n                if (finalYear === this.calendar.currentDate.getFullYear()) {\n                    selected = true;\n                }\n\n                years.push({\n                    year: finalYear,\n                    selected: selected\n                });\n            }\n            return years;\n        }\n    },\n    watch: {\n        'calendar.selectedDate': {\n            handler(val) {\n                this.input.selectedDate = val || '';\n                this.markChooseDays();\n            }\n        },\n        'calendar.currentDate': {\n            handler(value) {\n                this.$emit('input', this.calendar);\n                if (this.fConfigs.limits) {\n                    let min = helpCalendar.getDateFromFormat(this.fConfigs.limits.min).getTime();\n                    let max = helpCalendar.getDateFromFormat(this.fConfigs.limits.max).getTime();\n\n                    let current = value.getTime();\n                    this.allowPreDate = true;\n                    this.allowNextDate = true;\n\n                    if (current <= min) {\n                        this.allowPreDate = false;\n                    }\n\n                    if (current >= max) {\n                        this.allowNextDate = false;\n                    }\n                }\n            }\n        },\n        'calendar.dateRange.start': {\n            handler(val) {\n                this.input.dateRange.start = val || '';\n                this.markChooseDays();\n            }\n        },\n        'calendar.dateRange.end': {\n            handler(val) {\n                this.input.dateRange.end = val || '';\n                this.markChooseDays();\n            }\n        },\n        'input.selectedDate': {\n            handler(val) {\n                this.input.selectedDate = val = helpCalendar.mask(val);\n                if (helpCalendar.getDateFromFormat(val).getMonth()) {\n                    this.calendar.selectedDate = val;\n                    this.pickYear(helpCalendar.getDateFromFormat(val).getFullYear());\n                    this.pickMonth(helpCalendar.getDateFromFormat(val).getMonth());\n                    this.markChooseDays();\n                }\n            }\n        },\n        'input.dateRange.start': {\n            handler(val) {\n                this.input.dateRange.start = val = helpCalendar.mask(val);\n                if (helpCalendar.getDateFromFormat(val).getMonth()) {\n                    this.calendar.dateRange.start = val;\n                    this.pickYear(helpCalendar.getDateFromFormat(val).getFullYear());\n                    this.pickMonth(helpCalendar.getDateFromFormat(val).getMonth());\n                    this.markChooseDays();\n                }\n            }\n        },\n        'input.dateRange.end': {\n            handler(val) {\n                this.input.dateRange.end = val = helpCalendar.mask(val);\n                if (helpCalendar.getDateFromFormat(val).getMonth()) {\n                    this.calendar.dateRange.end = val;\n                    this.pickYear(helpCalendar.getDateFromFormat(val).getFullYear());\n                    this.pickMonth(helpCalendar.getDateFromFormat(val).getMonth());\n                    this.markChooseDays();\n                }\n            }\n        }\n    },\n    methods: {\n        initCalendar() {\n            // Set Help Calendar Configs\n            helpCalendar.configs.sundayStart = this.fConfigs.sundayStart;\n            helpCalendar.configs.leftAndRightDays = this.fConfigs.leftAndRightDays;\n            helpCalendar.configs.dateFormat = this.fConfigs.dateFormat;\n            helpCalendar.configs.dayNames = this.fConfigs.dayNames;\n            helpCalendar.configs.monthNames = this.fConfigs.monthNames;\n\n\n            // Sunday Start\n            if (this.fConfigs.sundayStart) {\n                let dayNames = this.fConfigs.dayNames;\n                console.log(dayNames);\n                let sundayName = dayNames[dayNames.length - 1];\n                console.log(sundayName);\n                dayNames.splice(dayNames.length - 1, 1);\n                dayNames.unshift(sundayName);\n            }\n\n            this.setCalendarData();\n            this.listRendering();\n            this.markChooseDays();\n        },\n        setCalendarData() {\n            let date = this.calendar.currentDate;\n            this.listCalendars = [];\n            date = new Date(date.getFullYear(), date.getMonth() - 1);\n            for (let i = 0; i < this.fConfigs.calendarsCount; i++) {\n                date = new Date(date.getFullYear(), date.getMonth() + 1);\n\n                let calendar = {\n                    date: date,\n                    dateTop: `${this.fConfigs.monthNames[date.getMonth()]} ${date.getFullYear()}`,\n                    weeks: helpCalendar.getFinalizedWeeks(date.getMonth(), date.getFullYear())\n                };\n\n                this.listCalendars.push(calendar);\n\n                if (!this.fConfigs.isMultiple) {\n                    break;\n                }\n            }\n        },\n        setConfigs() {\n            let vm = this;\n            if (typeof (this.configs) !== \"undefined\") {\n                Object.keys(this.configs).map(function (objectKey) {\n                    if (typeof (vm.fConfigs[objectKey]) !== \"undefined\") {\n                        vm.$set(vm.fConfigs, objectKey, vm.configs[objectKey]);\n                    }\n                });\n            } else {\n                Object.keys(this.$props).map(function (objectKey) {\n                    if (typeof (vm.fConfigs[objectKey]) !== \"undefined\") {\n                        vm.$set(vm.fConfigs, objectKey, vm.$props[objectKey]);\n                    }\n                });\n            }\n\n            // Is Modal\n            if (this.fConfigs.isModal) this.showCalendar = false;\n\n            // Placeholder\n            if (!this.fConfigs.placeholder) this.fConfigs.placeholder = this.fConfigs.dateFormat;\n\n\n            // Limits\n            if (this.fConfigs.limits) {\n                this.calendar.currentDate = helpCalendar.getDateFromFormat(this.fConfigs.limits.min);\n            } else {\n                // New Date\n                this.calendar.currentDate = this.newCurrentDate;\n            }\n        },\n        listRendering() {\n            let vm = this;\n\n            // Each Calendars\n            vm.listCalendars.forEach(function (calendar) {\n                // Set Calendar Weeks\n                calendar.weeks.forEach(function (week) {\n\n                    let finalizedDays = [];\n\n                    week.days.forEach(function (day) {\n                        let date = new Date(day.year, day.month, day.day);\n                        let now = new Date();\n\n                        let isToday = false;\n\n                        date.setHours(0, 0, 0, 0);\n                        now.setHours(0, 0, 0, 0);\n\n                        if (date.getTime() === now.getTime()) {\n                            isToday = true;\n                        }\n\n                        let checkMarked;\n                        // With Custom Classes\n                        if (typeof vm.fConfigs.markedDates[0] === \"object\") {\n                            checkMarked = vm.fConfigs.markedDates.find(function (markDate) {\n                                return markDate.date === helpCalendar.formatDate(date)\n                            });\n                        } else {\n                            // Without Classes\n                            checkMarked = vm.fConfigs.markedDates.find(function (markDate) {\n                                return markDate === helpCalendar.formatDate(date)\n                            });\n                        }\n\n                        if (vm.calendar.dateRange.start === helpCalendar.formatDate(date)) {\n                            checkMarked = true;\n                        }\n\n                        let isMarked = false;\n                        if (typeof checkMarked !== \"undefined\") {\n                            isMarked = true;\n                        }\n\n                        finalizedDays.push({\n                            day: day.day,\n                            date: helpCalendar.formatDate(date),\n                            hide: day.hide,\n                            hideLeftAndRightDays: day.hideLeftAndRightDays,\n                            isToday: isToday,\n                            isMarked: isMarked\n                        });\n                    });\n\n                    week.days = finalizedDays;\n                });\n            });\n\n        },\n        clickDay(item) {\n            if (!this.fConfigs.isDateRange && !this.fConfigs.isDatePicker) {\n                return false;\n            }\n\n            // Disable days of week if set in configuration\n            let dateDay = helpCalendar.getDateFromFormat(item.date).getDay() - 1;\n            if (dateDay === -1) {\n                dateDay = 6;\n            }\n            let dayOfWeekString = this.fConfigs.dayNames[dateDay];\n            if (this.fConfigs.disabledDayNames.includes(dayOfWeekString)) {\n                return false;\n            }\n\n            // Disabled dates\n            if (this.fConfigs.disabledDates.includes(item.date)) {\n                return false;\n            }\n\n            if (this.fConfigs.isDateRange) {\n\n                let clickDate = helpCalendar.getDateFromFormat(item.date).getTime();\n\n                let startDate = false;\n                if (this.calendar.dateRange.start) {\n                    startDate = helpCalendar.getDateFromFormat(this.calendar.dateRange.start).getTime();\n                }\n\n                // Two dates is not empty\n                if (this.calendar.dateRange.start !== false && this.calendar.dateRange.end !== false) {\n                    this.calendar.dateRange.start = item.date;\n                    this.calendar.dateRange.end = false;\n                    // Not date selected\n                } else if (this.calendar.dateRange.start === false && this.calendar.dateRange.end === false) {\n                    this.calendar.dateRange.start = item.date;\n                    // Start Date not empty, chose date > start date\n                } else if (this.calendar.dateRange.end === false && (clickDate > startDate)) {\n                    this.calendar.dateRange.end = item.date;\n                    // Start date not empty, chose date < start date\n                } else if (this.calendar.dateRange.start !== false && (clickDate < startDate)) {\n                    this.calendar.dateRange.end = this.calendar.dateRange.start;\n                    this.calendar.dateRange.start = item.date;\n                }\n\n\n                //Get number of days between date range dates\n                if (this.calendar.dateRange.start !== false && this.calendar.dateRange.end !== false) {\n                    let oneDay = 24 * 60 * 60 * 1000;\n                    let firstDate = helpCalendar.getDateFromFormat(this.calendar.dateRange.start);\n                    let secondDate = helpCalendar.getDateFromFormat(this.calendar.dateRange.end);\n                    let diffDays = Math.round(Math.abs((firstDate.getTime() - secondDate.getTime()) / (oneDay)));\n\n                    this.$emit('selectedDaysCount', diffDays);\n                }\n\n                this.$emit('input', {\n                    dateRange: this.calendar\n                });\n            } else if (this.fConfigs.isDatePicker) {\n                this.calendar.selectedDate = item.date;\n\n                this.$emit('input', this.calendar);\n            }\n\n            this.markChooseDays();\n        },\n        markChooseDays() {\n            let vm = this;\n            let startDate = vm.calendar.dateRange.start;\n            let endDate = vm.calendar.dateRange.end;\n\n            this.listCalendars.forEach((calendar) => {\n                calendar.weeks.forEach((week) => {\n                    week.days.forEach((day) => {\n\n                        day.isMarked = false;\n\n                        // Date Picker\n                        if (vm.fConfigs.isDatePicker) {\n                            if (this.calendar.selectedDate === day.date)\n                                day.isMarked = true;\n                        } else {\n                            // Date Range\n                            if (startDate === day.date)\n                                day.isMarked = true;\n\n                            if (endDate === day.date)\n                                day.isMarked = true;\n\n                            if (startDate && endDate) {\n                                if (helpCalendar.getDateFromFormat(day.date).getTime() > helpCalendar.getDateFromFormat(startDate)\n                                    && helpCalendar.getDateFromFormat(day.date) < helpCalendar.getDateFromFormat(endDate)) {\n                                    day.isMarked = true;\n                                }\n                            }\n                        }\n\n                        if (this.fConfigs.markedDates.includes(day.date))\n                            day.isMarked = true;\n                    })\n                })\n            })\n        },\n        dateMouseOver(week_key, date) {\n            if (!this.fConfigs.isDateRange) {\n                return false;\n            }\n\n            if ((this.calendar.dateRange.start === false || this.calendar.dateRange.end === false)\n                && (this.calendar.dateRange.start !== false || this.calendar.dateRange.end !== false)) {\n                for (let e = 0; e < this.listCalendars.length; e++) {\n                    let calendar = this.listCalendars[e];\n\n                    for (let f = 0; f < calendar.weeks.length; f++) {\n                        let week = calendar.weeks[f];\n\n                        for (let i = 0; i < week.days.length; i++) {\n\n                            let item = week.days[i];\n\n                            if (item.date !== this.calendar.dateRange.start && !this.fConfigs.markedDates.includes(item.date)) {\n                                this.listCalendars[e].weeks[f].days[i].isMarked = false;\n                            }\n\n                            if (this.calendar.dateRange.start) {\n                                let itemDate = helpCalendar.getDateFromFormat(item.date).getTime();\n                                let thisDate = helpCalendar.getDateFromFormat(date).getTime();\n                                let startDate = helpCalendar.getDateFromFormat(this.calendar.dateRange.start).getTime();\n\n                                let dateDay = helpCalendar.getDateFromFormat(item.date).getDay() - 1;\n                                if (dateDay === -1) {\n                                    dateDay = 6;\n                                }\n\n                                let dayOfWeekString = this.fConfigs.dayNames[dateDay];\n                                if (!this.fConfigs.disabledDayNames.includes(dayOfWeekString) &&\n                                    ((itemDate > startDate && itemDate < thisDate)\n                                        ||\n                                        (itemDate < startDate && itemDate > thisDate))\n                                ) {\n                                    this.listCalendars[e].weeks[f].days[i].isMarked = true;\n                                }\n\n                            }\n                        }\n\n                    }\n                }\n            }\n        },\n        /**\n         * @return {boolean}\n         */\n        PreMonth() {\n            if (!this.allowPreDate)\n                return false;\n\n            this.transitionPrefix = 'right';\n\n            this.calendarsKey -= 1;\n\n            this.calendar.currentDate = new Date(this.calendar.currentDate.getFullYear(), this.calendar.currentDate.getMonth() - 1);\n            this.initCalendar();\n            this.$emit('changedMonth', this.calendar.currentDate);\n        },\n        /**\n         * @return {boolean}\n         */\n        NextMonth() {\n            if (!this.allowNextDate)\n                return false;\n\n            this.transitionPrefix = 'left';\n\n            this.calendarsKey += 1;\n\n            this.calendar.currentDate = new Date(this.calendar.currentDate.getFullYear(), this.calendar.currentDate.getMonth() + 1);\n            this.initCalendar();\n            this.$emit('changedMonth', this.calendar.currentDate);\n        },\n        /**\n         * @return {boolean}\n         */\n        PreYear() {\n            if (!this.allowPreDate)\n                return false;\n\n            this.calendar.currentDate = new Date(this.calendar.currentDate.getFullYear() - 1, this.calendar.currentDate.getMonth());\n            this.initCalendar();\n            this.$emit('changedYear', this.calendar.currentDate);\n        },\n        /**\n         * @return {boolean}\n         */\n        NextYear() {\n            if (!this.allowNextDate)\n                return false;\n\n            this.calendar.currentDate = new Date(this.calendar.currentDate.getFullYear() + 1, this.calendar.currentDate.getMonth());\n            this.initCalendar();\n            this.$emit('changedYear', this.calendar.currentDate);\n        },\n        ChooseDate(date) {\n            this.calendar.currentDate = helpCalendar.getDateFromFormat(date);\n            this.initCalendar();\n        },\n        openMonthPicker() {\n            if (this.fConfigs.changeMonthFunction)\n                this.showMonthPicker = true;\n        },\n        openYearPicker() {\n            if (this.fConfigs.changeYearFunction)\n                this.showYearPicker = true;\n        },\n        pickMonth(key) {\n            this.showMonthPicker = false;\n            let date = this.calendar.currentDate;\n            this.calendar.currentDate = new Date(date.getFullYear(), key + 1, 0);\n            this.initCalendar();\n        },\n        pickYear(year) {\n            this.showYearPicker = false;\n            let date = this.calendar.currentDate;\n            this.calendar.currentDate = new Date(year, date.getMonth(), 0);\n            this.initCalendar();\n        },\n        getClassNames(day) {\n            let classes = [];\n\n            // Disable days of week if set in configuration\n            let dateDay = helpCalendar.getDateFromFormat(day.date).getDay() - 1;\n            if (dateDay === -1) {\n                dateDay = 6;\n            }\n            let dayOfWeekString = this.fConfigs.dayNames[dateDay];\n            if (this.fConfigs.disabledDayNames.includes(dayOfWeekString)) {\n                day.hide = true;\n                classes.push('vfc-cursor-not-allowed');\n            }\n\n            // Disabled dates\n            if (this.fConfigs.disabledDates.includes(day.date)) {\n                classes.push('vfc-disabled');\n                classes.push('vfc-cursor-not-allowed');\n            }\n\n            if (day.hide) {\n                classes.push('vfc-hide');\n            }\n\n            // Today date\n            if (day.isToday) {\n                classes.push('vfc-today');\n            }\n\n            if (!day.hideLeftAndRightDays && !this.fConfigs.disabledDayNames.includes(dayOfWeekString)) {\n\n                // Mark Date\n                if (day.isMarked) {\n                    classes.push('vfc-marked');\n                }\n\n                // Date Range Marked\n                if (this.fConfigs.markedDateRange.start && this.fConfigs.markedDateRange.end) {\n                    if (helpCalendar.getDateFromFormat(this.fConfigs.markedDateRange.start) <= helpCalendar.getDateFromFormat(day.date)\n                        && helpCalendar.getDateFromFormat(this.fConfigs.markedDateRange.end) >= helpCalendar.getDateFromFormat(day.date)) {\n                        classes.push('vfc-marked');\n                    }\n                } else {\n\n                    // Only After Start Marked\n                    if (this.fConfigs.markedDateRange.start) {\n                        if (helpCalendar.getDateFromFormat(this.fConfigs.markedDateRange.start) <= helpCalendar.getDateFromFormat(day.date))\n                            classes.push('vfc-marked');\n                    }\n\n                    // Only Before End Marked\n                    if (this.fConfigs.markedDateRange.end) {\n                        if (helpCalendar.getDateFromFormat(this.fConfigs.markedDateRange.end) >= helpCalendar.getDateFromFormat(day.date))\n                            classes.push('vfc-marked');\n                    }\n                }\n\n                classes.push('vfc-hover');\n            }\n\n\n            // Date Mark With Custom Classes\n            if (typeof this.fConfigs.markedDates === \"object\") {\n                let checkMarked = this.fConfigs.markedDates.find(function (markDate) {\n                    return markDate.date === day.date;\n                });\n\n                if (typeof checkMarked !== \"undefined\") {\n                    classes.push(checkMarked.class);\n                }\n            }\n\n            if(day.date === this.calendar.dateRange.start || day.date === this.calendar.dateRange.end || day.date === this.calendar.selectedDate){\n                classes.push('borderd');\n            }\n\n            return classes;\n        },\n        getTransition_() {\n            if(!this.fConfigs.transition)\n                return '';\n\n            let name = '';\n            if(this.transitionPrefix === 'left'){\n                name = 'vfc-calendar-slide-left';\n            }else if(this.transitionPrefix === 'right') {\n                name = 'vfc-calendar-slide-right';\n            }\n            return name;\n        },\n    }\n}\n",{"version":3,"sources":["FunctionalCalendar.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2GA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"FunctionalCalendar.vue","sourceRoot":"node_modules/vue-functional-calendar/src/components","sourcesContent":["<template>\r\n    <div :class=\"{'vfc-styles-conditional-class': fConfigs.applyStylesheet }\">\r\n        <div class=\"vfc-multiple-input\" v-if=\"fConfigs.isModal && fConfigs.isDateRange\">\r\n            <input type=\"text\" title=\"Start Date\"\r\n                   v-model=\"input.dateRange.start\"\r\n                   :placeholder=\"fConfigs.placeholder\"\r\n                   :readonly=\"!fConfigs.isTypeable\"\r\n                   :maxlength=\"fConfigs.dateFormat.length\"\r\n                   @click=\"showCalendar = !showCalendar\">\r\n            <input type=\"text\" title=\"End Date\"\r\n                   v-model=\"input.dateRange.end\"\r\n                   :placeholder=\"fConfigs.placeholder\"\r\n                   :readonly=\"!fConfigs.isTypeable\"\r\n                   :maxlength=\"fConfigs.dateFormat.length\"\r\n                   @click=\"showCalendar = !showCalendar\">\r\n        </div>\r\n        <div v-else-if=\"fConfigs.isModal && fConfigs.isDatePicker\">\r\n            <input class=\"vfc-single-input\" type=\"text\" title=\"Date\"\r\n                   v-model=\"input.selectedDate\"\r\n                   :placeholder=\"fConfigs.placeholder\"\r\n                   :readonly=\"!fConfigs.isTypeable\"\r\n                   :maxlength=\"fConfigs.dateFormat.length\"\r\n                   @click=\"showCalendar = !showCalendar\">\r\n        </div>\r\n\r\n        <div class=\"vfc-main-container\" v-if=\"showCalendar\"\r\n             :class=\"{'vfc-modal': fConfigs.isModal && (fConfigs.isDatePicker || fConfigs.isDateRange)}\">\r\n            <template v-if=\"showMonthPicker\">\r\n                <div class=\"vfc-months\">\r\n                    <div class=\"vfc-navigation-buttons\" v-if=\"true\">\r\n                        <div @click=\"PreYear\">\r\n                            <div class=\"vfc-arrow-left\"></div>\r\n                        </div>\r\n                        <h2 class=\"vfc-top-date\"\r\n                            @click=\"openYearPicker\"\r\n                            :class=\"{'vfc-underline': !showYearPicker && fConfigs.changeYearFunction}\">{{\r\n                            calendar.currentDate.getFullYear() }}</h2>\r\n                        <div @click=\"NextYear\">\r\n                            <div class=\"vfc-arrow-right\"></div>\r\n                        </div>\r\n                    </div>\r\n                    <template v-if=\"!showYearPicker\">\r\n                        <div class=\"vfc-item\" v-for=\"(month,key) in fConfigs.monthNames\"\r\n                             :key=\"key\"\r\n                             :class=\"{'vfc-selected': calendar.currentDate.getMonth()===key}\"\r\n                             @click=\"pickMonth(key)\">\r\n                            {{ month }}\r\n                        </div>\r\n                    </template>\r\n                    <template v-else>\r\n                        <div class=\"vfc-item\"\r\n                             v-for=\"(year,key) in yearList\"\r\n                             :key=\"key\"\r\n                             :class=\"{'vfc-selected': year.selected}\"\r\n                             @click=\"pickYear(year.year)\">\r\n                            {{ year.year }}\r\n                        </div>\r\n                    </template>\r\n                </div>\r\n            </template>\r\n            <template v-else>\r\n                <div class=\"vfc-navigation-buttons\" v-if=\"true\">\r\n                    <div @click=\"PreMonth\" :class=\"{'vfc-cursor-pointer': allowPreDate}\">\r\n                        <div class=\"vfc-arrow-left\" :class=\"{'vfc-disabled': !allowPreDate}\"></div>\r\n                    </div>\r\n                    <div @click=\"NextMonth\" :class=\"{'vfc-cursor-pointer': allowNextDate}\">\r\n                        <div class=\"vfc-arrow-right\" :class=\"{'vfc-disabled': !allowNextDate}\"></div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"vfc-calendars\" :key=\"calendarsKey\">\r\n                    <div class=\"vfc-calendar\" v-for=\"(calendar, key) in listCalendars\" :key=\"key\">\r\n                        <div class=\"vfc-content\">\r\n                            <h2 class=\"vfc-top-date\"\r\n                                :class=\"{'vfc-cursor-pointer':changeMonthFunction}\"\r\n                                @click=\"openMonthPicker(key)\">\r\n                                {{ calendar.dateTop }}\r\n                            </h2>\r\n                            <section class=\"vfc-dayNames\">\r\n                                <span v-for=\"(dayName, key) in fConfigs.dayNames\" :key=\"key\">\r\n                                    {{ dayName }}\r\n                                </span>\r\n                            </section>\r\n                            <transition-group\r\n                                    tag='div'\r\n                                    class='c-title-anchor'\r\n                                    :name='getTransition_()' appear>\r\n                                <div class=\"vfc-week\" v-for=\"(week, week_key) in calendar.weeks\" :key=\"week_key+0\">\r\n\r\n                                    <div class=\"vfc-day\" v-for=\"(day, day_key) in week.days\" :key=\"day_key\">\r\n                                        <span :data-date=\"day.day\" :key=\"day_key\"\r\n                                              :class=\"getClassNames(day)\"\r\n                                              @click=\"clickDay(day)\"\r\n                                              @mouseover=\"dateMouseOver(week_key, day.date)\">\r\n                                        </span>\r\n                                    </div>\r\n\r\n                                </div>\r\n                            </transition-group>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </template>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import helpCalendar from '../assets/js/calendar'\r\n    import {propsAndData} from \"../mixins/propsAndData\";\r\n\r\n    export default {\r\n        name: \"FunctionalCalendar\",\r\n        mixins: [propsAndData],\r\n        created() {\r\n            this.setConfigs();\r\n            this.initCalendar();\r\n\r\n            if (this.fConfigs.isModal) {\r\n                // Event\r\n                window.addEventListener('click', (e) => {\r\n                    if (!this.$el.contains(e.target)) {\r\n                        this.showCalendar = false\r\n                    }\r\n                });\r\n            }\r\n        },\r\n        mounted() {\r\n            // Reacts to external selected dates\r\n            this.$watch('value', function (value) {\r\n                if (this.fConfigs.isDateRange) {\r\n                    this.calendar.dateRange.start = value.dateRange.start || false;\r\n                    this.calendar.dateRange.end = value.dateRange.end || false\r\n                } else {\r\n                    this.calendar.selectedDate = value.selectedDate || false\r\n                }\r\n            }, {deep: true});\r\n\r\n            this.$watch('showCalendar', function (value) {\r\n                if (value)\r\n                    this.$emit('opened');\r\n                else\r\n                    this.$emit('closed');\r\n            }, {immediate: true, deep: true})\r\n        },\r\n        computed: {\r\n            yearList() {\r\n                let years = [];\r\n                let year = this.calendar.currentDate.getFullYear() - 4;\r\n                for (let i = 0; i < 12; i++) {\r\n                    let finalYear = year + i;\r\n\r\n                    let selected = false;\r\n\r\n                    if (finalYear === this.calendar.currentDate.getFullYear()) {\r\n                        selected = true;\r\n                    }\r\n\r\n                    years.push({\r\n                        year: finalYear,\r\n                        selected: selected\r\n                    });\r\n                }\r\n                return years;\r\n            }\r\n        },\r\n        watch: {\r\n            'calendar.selectedDate': {\r\n                handler(val) {\r\n                    this.input.selectedDate = val || '';\r\n                    this.markChooseDays();\r\n                }\r\n            },\r\n            'calendar.currentDate': {\r\n                handler(value) {\r\n                    this.$emit('input', this.calendar);\r\n                    if (this.fConfigs.limits) {\r\n                        let min = helpCalendar.getDateFromFormat(this.fConfigs.limits.min).getTime();\r\n                        let max = helpCalendar.getDateFromFormat(this.fConfigs.limits.max).getTime();\r\n\r\n                        let current = value.getTime();\r\n                        this.allowPreDate = true;\r\n                        this.allowNextDate = true;\r\n\r\n                        if (current <= min) {\r\n                            this.allowPreDate = false;\r\n                        }\r\n\r\n                        if (current >= max) {\r\n                            this.allowNextDate = false;\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            'calendar.dateRange.start': {\r\n                handler(val) {\r\n                    this.input.dateRange.start = val || '';\r\n                    this.markChooseDays();\r\n                }\r\n            },\r\n            'calendar.dateRange.end': {\r\n                handler(val) {\r\n                    this.input.dateRange.end = val || '';\r\n                    this.markChooseDays();\r\n                }\r\n            },\r\n            'input.selectedDate': {\r\n                handler(val) {\r\n                    this.input.selectedDate = val = helpCalendar.mask(val);\r\n                    if (helpCalendar.getDateFromFormat(val).getMonth()) {\r\n                        this.calendar.selectedDate = val;\r\n                        this.pickYear(helpCalendar.getDateFromFormat(val).getFullYear());\r\n                        this.pickMonth(helpCalendar.getDateFromFormat(val).getMonth());\r\n                        this.markChooseDays();\r\n                    }\r\n                }\r\n            },\r\n            'input.dateRange.start': {\r\n                handler(val) {\r\n                    this.input.dateRange.start = val = helpCalendar.mask(val);\r\n                    if (helpCalendar.getDateFromFormat(val).getMonth()) {\r\n                        this.calendar.dateRange.start = val;\r\n                        this.pickYear(helpCalendar.getDateFromFormat(val).getFullYear());\r\n                        this.pickMonth(helpCalendar.getDateFromFormat(val).getMonth());\r\n                        this.markChooseDays();\r\n                    }\r\n                }\r\n            },\r\n            'input.dateRange.end': {\r\n                handler(val) {\r\n                    this.input.dateRange.end = val = helpCalendar.mask(val);\r\n                    if (helpCalendar.getDateFromFormat(val).getMonth()) {\r\n                        this.calendar.dateRange.end = val;\r\n                        this.pickYear(helpCalendar.getDateFromFormat(val).getFullYear());\r\n                        this.pickMonth(helpCalendar.getDateFromFormat(val).getMonth());\r\n                        this.markChooseDays();\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        methods: {\r\n            initCalendar() {\r\n                // Set Help Calendar Configs\r\n                helpCalendar.configs.sundayStart = this.fConfigs.sundayStart;\r\n                helpCalendar.configs.leftAndRightDays = this.fConfigs.leftAndRightDays;\r\n                helpCalendar.configs.dateFormat = this.fConfigs.dateFormat;\r\n                helpCalendar.configs.dayNames = this.fConfigs.dayNames;\r\n                helpCalendar.configs.monthNames = this.fConfigs.monthNames;\r\n\r\n\r\n                // Sunday Start\r\n                if (this.fConfigs.sundayStart) {\r\n                    let dayNames = this.fConfigs.dayNames;\r\n                    console.log(dayNames);\r\n                    let sundayName = dayNames[dayNames.length - 1];\r\n                    console.log(sundayName);\r\n                    dayNames.splice(dayNames.length - 1, 1);\r\n                    dayNames.unshift(sundayName);\r\n                }\r\n\r\n                this.setCalendarData();\r\n                this.listRendering();\r\n                this.markChooseDays();\r\n            },\r\n            setCalendarData() {\r\n                let date = this.calendar.currentDate;\r\n                this.listCalendars = [];\r\n                date = new Date(date.getFullYear(), date.getMonth() - 1);\r\n                for (let i = 0; i < this.fConfigs.calendarsCount; i++) {\r\n                    date = new Date(date.getFullYear(), date.getMonth() + 1);\r\n\r\n                    let calendar = {\r\n                        date: date,\r\n                        dateTop: `${this.fConfigs.monthNames[date.getMonth()]} ${date.getFullYear()}`,\r\n                        weeks: helpCalendar.getFinalizedWeeks(date.getMonth(), date.getFullYear())\r\n                    };\r\n\r\n                    this.listCalendars.push(calendar);\r\n\r\n                    if (!this.fConfigs.isMultiple) {\r\n                        break;\r\n                    }\r\n                }\r\n            },\r\n            setConfigs() {\r\n                let vm = this;\r\n                if (typeof (this.configs) !== \"undefined\") {\r\n                    Object.keys(this.configs).map(function (objectKey) {\r\n                        if (typeof (vm.fConfigs[objectKey]) !== \"undefined\") {\r\n                            vm.$set(vm.fConfigs, objectKey, vm.configs[objectKey]);\r\n                        }\r\n                    });\r\n                } else {\r\n                    Object.keys(this.$props).map(function (objectKey) {\r\n                        if (typeof (vm.fConfigs[objectKey]) !== \"undefined\") {\r\n                            vm.$set(vm.fConfigs, objectKey, vm.$props[objectKey]);\r\n                        }\r\n                    });\r\n                }\r\n\r\n                // Is Modal\r\n                if (this.fConfigs.isModal) this.showCalendar = false;\r\n\r\n                // Placeholder\r\n                if (!this.fConfigs.placeholder) this.fConfigs.placeholder = this.fConfigs.dateFormat;\r\n\r\n\r\n                // Limits\r\n                if (this.fConfigs.limits) {\r\n                    this.calendar.currentDate = helpCalendar.getDateFromFormat(this.fConfigs.limits.min);\r\n                } else {\r\n                    // New Date\r\n                    this.calendar.currentDate = this.newCurrentDate;\r\n                }\r\n            },\r\n            listRendering() {\r\n                let vm = this;\r\n\r\n                // Each Calendars\r\n                vm.listCalendars.forEach(function (calendar) {\r\n                    // Set Calendar Weeks\r\n                    calendar.weeks.forEach(function (week) {\r\n\r\n                        let finalizedDays = [];\r\n\r\n                        week.days.forEach(function (day) {\r\n                            let date = new Date(day.year, day.month, day.day);\r\n                            let now = new Date();\r\n\r\n                            let isToday = false;\r\n\r\n                            date.setHours(0, 0, 0, 0);\r\n                            now.setHours(0, 0, 0, 0);\r\n\r\n                            if (date.getTime() === now.getTime()) {\r\n                                isToday = true;\r\n                            }\r\n\r\n                            let checkMarked;\r\n                            // With Custom Classes\r\n                            if (typeof vm.fConfigs.markedDates[0] === \"object\") {\r\n                                checkMarked = vm.fConfigs.markedDates.find(function (markDate) {\r\n                                    return markDate.date === helpCalendar.formatDate(date)\r\n                                });\r\n                            } else {\r\n                                // Without Classes\r\n                                checkMarked = vm.fConfigs.markedDates.find(function (markDate) {\r\n                                    return markDate === helpCalendar.formatDate(date)\r\n                                });\r\n                            }\r\n\r\n                            if (vm.calendar.dateRange.start === helpCalendar.formatDate(date)) {\r\n                                checkMarked = true;\r\n                            }\r\n\r\n                            let isMarked = false;\r\n                            if (typeof checkMarked !== \"undefined\") {\r\n                                isMarked = true;\r\n                            }\r\n\r\n                            finalizedDays.push({\r\n                                day: day.day,\r\n                                date: helpCalendar.formatDate(date),\r\n                                hide: day.hide,\r\n                                hideLeftAndRightDays: day.hideLeftAndRightDays,\r\n                                isToday: isToday,\r\n                                isMarked: isMarked\r\n                            });\r\n                        });\r\n\r\n                        week.days = finalizedDays;\r\n                    });\r\n                });\r\n\r\n            },\r\n            clickDay(item) {\r\n                if (!this.fConfigs.isDateRange && !this.fConfigs.isDatePicker) {\r\n                    return false;\r\n                }\r\n\r\n                // Disable days of week if set in configuration\r\n                let dateDay = helpCalendar.getDateFromFormat(item.date).getDay() - 1;\r\n                if (dateDay === -1) {\r\n                    dateDay = 6;\r\n                }\r\n                let dayOfWeekString = this.fConfigs.dayNames[dateDay];\r\n                if (this.fConfigs.disabledDayNames.includes(dayOfWeekString)) {\r\n                    return false;\r\n                }\r\n\r\n                // Disabled dates\r\n                if (this.fConfigs.disabledDates.includes(item.date)) {\r\n                    return false;\r\n                }\r\n\r\n                if (this.fConfigs.isDateRange) {\r\n\r\n                    let clickDate = helpCalendar.getDateFromFormat(item.date).getTime();\r\n\r\n                    let startDate = false;\r\n                    if (this.calendar.dateRange.start) {\r\n                        startDate = helpCalendar.getDateFromFormat(this.calendar.dateRange.start).getTime();\r\n                    }\r\n\r\n                    // Two dates is not empty\r\n                    if (this.calendar.dateRange.start !== false && this.calendar.dateRange.end !== false) {\r\n                        this.calendar.dateRange.start = item.date;\r\n                        this.calendar.dateRange.end = false;\r\n                        // Not date selected\r\n                    } else if (this.calendar.dateRange.start === false && this.calendar.dateRange.end === false) {\r\n                        this.calendar.dateRange.start = item.date;\r\n                        // Start Date not empty, chose date > start date\r\n                    } else if (this.calendar.dateRange.end === false && (clickDate > startDate)) {\r\n                        this.calendar.dateRange.end = item.date;\r\n                        // Start date not empty, chose date < start date\r\n                    } else if (this.calendar.dateRange.start !== false && (clickDate < startDate)) {\r\n                        this.calendar.dateRange.end = this.calendar.dateRange.start;\r\n                        this.calendar.dateRange.start = item.date;\r\n                    }\r\n\r\n\r\n                    //Get number of days between date range dates\r\n                    if (this.calendar.dateRange.start !== false && this.calendar.dateRange.end !== false) {\r\n                        let oneDay = 24 * 60 * 60 * 1000;\r\n                        let firstDate = helpCalendar.getDateFromFormat(this.calendar.dateRange.start);\r\n                        let secondDate = helpCalendar.getDateFromFormat(this.calendar.dateRange.end);\r\n                        let diffDays = Math.round(Math.abs((firstDate.getTime() - secondDate.getTime()) / (oneDay)));\r\n\r\n                        this.$emit('selectedDaysCount', diffDays);\r\n                    }\r\n\r\n                    this.$emit('input', {\r\n                        dateRange: this.calendar\r\n                    });\r\n                } else if (this.fConfigs.isDatePicker) {\r\n                    this.calendar.selectedDate = item.date;\r\n\r\n                    this.$emit('input', this.calendar);\r\n                }\r\n\r\n                this.markChooseDays();\r\n            },\r\n            markChooseDays() {\r\n                let vm = this;\r\n                let startDate = vm.calendar.dateRange.start;\r\n                let endDate = vm.calendar.dateRange.end;\r\n\r\n                this.listCalendars.forEach((calendar) => {\r\n                    calendar.weeks.forEach((week) => {\r\n                        week.days.forEach((day) => {\r\n\r\n                            day.isMarked = false;\r\n\r\n                            // Date Picker\r\n                            if (vm.fConfigs.isDatePicker) {\r\n                                if (this.calendar.selectedDate === day.date)\r\n                                    day.isMarked = true;\r\n                            } else {\r\n                                // Date Range\r\n                                if (startDate === day.date)\r\n                                    day.isMarked = true;\r\n\r\n                                if (endDate === day.date)\r\n                                    day.isMarked = true;\r\n\r\n                                if (startDate && endDate) {\r\n                                    if (helpCalendar.getDateFromFormat(day.date).getTime() > helpCalendar.getDateFromFormat(startDate)\r\n                                        && helpCalendar.getDateFromFormat(day.date) < helpCalendar.getDateFromFormat(endDate)) {\r\n                                        day.isMarked = true;\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                            if (this.fConfigs.markedDates.includes(day.date))\r\n                                day.isMarked = true;\r\n                        })\r\n                    })\r\n                })\r\n            },\r\n            dateMouseOver(week_key, date) {\r\n                if (!this.fConfigs.isDateRange) {\r\n                    return false;\r\n                }\r\n\r\n                if ((this.calendar.dateRange.start === false || this.calendar.dateRange.end === false)\r\n                    && (this.calendar.dateRange.start !== false || this.calendar.dateRange.end !== false)) {\r\n                    for (let e = 0; e < this.listCalendars.length; e++) {\r\n                        let calendar = this.listCalendars[e];\r\n\r\n                        for (let f = 0; f < calendar.weeks.length; f++) {\r\n                            let week = calendar.weeks[f];\r\n\r\n                            for (let i = 0; i < week.days.length; i++) {\r\n\r\n                                let item = week.days[i];\r\n\r\n                                if (item.date !== this.calendar.dateRange.start && !this.fConfigs.markedDates.includes(item.date)) {\r\n                                    this.listCalendars[e].weeks[f].days[i].isMarked = false;\r\n                                }\r\n\r\n                                if (this.calendar.dateRange.start) {\r\n                                    let itemDate = helpCalendar.getDateFromFormat(item.date).getTime();\r\n                                    let thisDate = helpCalendar.getDateFromFormat(date).getTime();\r\n                                    let startDate = helpCalendar.getDateFromFormat(this.calendar.dateRange.start).getTime();\r\n\r\n                                    let dateDay = helpCalendar.getDateFromFormat(item.date).getDay() - 1;\r\n                                    if (dateDay === -1) {\r\n                                        dateDay = 6;\r\n                                    }\r\n\r\n                                    let dayOfWeekString = this.fConfigs.dayNames[dateDay];\r\n                                    if (!this.fConfigs.disabledDayNames.includes(dayOfWeekString) &&\r\n                                        ((itemDate > startDate && itemDate < thisDate)\r\n                                            ||\r\n                                            (itemDate < startDate && itemDate > thisDate))\r\n                                    ) {\r\n                                        this.listCalendars[e].weeks[f].days[i].isMarked = true;\r\n                                    }\r\n\r\n                                }\r\n                            }\r\n\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            /**\r\n             * @return {boolean}\r\n             */\r\n            PreMonth() {\r\n                if (!this.allowPreDate)\r\n                    return false;\r\n\r\n                this.transitionPrefix = 'right';\r\n\r\n                this.calendarsKey -= 1;\r\n\r\n                this.calendar.currentDate = new Date(this.calendar.currentDate.getFullYear(), this.calendar.currentDate.getMonth() - 1);\r\n                this.initCalendar();\r\n                this.$emit('changedMonth', this.calendar.currentDate);\r\n            },\r\n            /**\r\n             * @return {boolean}\r\n             */\r\n            NextMonth() {\r\n                if (!this.allowNextDate)\r\n                    return false;\r\n\r\n                this.transitionPrefix = 'left';\r\n\r\n                this.calendarsKey += 1;\r\n\r\n                this.calendar.currentDate = new Date(this.calendar.currentDate.getFullYear(), this.calendar.currentDate.getMonth() + 1);\r\n                this.initCalendar();\r\n                this.$emit('changedMonth', this.calendar.currentDate);\r\n            },\r\n            /**\r\n             * @return {boolean}\r\n             */\r\n            PreYear() {\r\n                if (!this.allowPreDate)\r\n                    return false;\r\n\r\n                this.calendar.currentDate = new Date(this.calendar.currentDate.getFullYear() - 1, this.calendar.currentDate.getMonth());\r\n                this.initCalendar();\r\n                this.$emit('changedYear', this.calendar.currentDate);\r\n            },\r\n            /**\r\n             * @return {boolean}\r\n             */\r\n            NextYear() {\r\n                if (!this.allowNextDate)\r\n                    return false;\r\n\r\n                this.calendar.currentDate = new Date(this.calendar.currentDate.getFullYear() + 1, this.calendar.currentDate.getMonth());\r\n                this.initCalendar();\r\n                this.$emit('changedYear', this.calendar.currentDate);\r\n            },\r\n            ChooseDate(date) {\r\n                this.calendar.currentDate = helpCalendar.getDateFromFormat(date);\r\n                this.initCalendar();\r\n            },\r\n            openMonthPicker() {\r\n                if (this.fConfigs.changeMonthFunction)\r\n                    this.showMonthPicker = true;\r\n            },\r\n            openYearPicker() {\r\n                if (this.fConfigs.changeYearFunction)\r\n                    this.showYearPicker = true;\r\n            },\r\n            pickMonth(key) {\r\n                this.showMonthPicker = false;\r\n                let date = this.calendar.currentDate;\r\n                this.calendar.currentDate = new Date(date.getFullYear(), key + 1, 0);\r\n                this.initCalendar();\r\n            },\r\n            pickYear(year) {\r\n                this.showYearPicker = false;\r\n                let date = this.calendar.currentDate;\r\n                this.calendar.currentDate = new Date(year, date.getMonth(), 0);\r\n                this.initCalendar();\r\n            },\r\n            getClassNames(day) {\r\n                let classes = [];\r\n\r\n                // Disable days of week if set in configuration\r\n                let dateDay = helpCalendar.getDateFromFormat(day.date).getDay() - 1;\r\n                if (dateDay === -1) {\r\n                    dateDay = 6;\r\n                }\r\n                let dayOfWeekString = this.fConfigs.dayNames[dateDay];\r\n                if (this.fConfigs.disabledDayNames.includes(dayOfWeekString)) {\r\n                    day.hide = true;\r\n                    classes.push('vfc-cursor-not-allowed');\r\n                }\r\n\r\n                // Disabled dates\r\n                if (this.fConfigs.disabledDates.includes(day.date)) {\r\n                    classes.push('vfc-disabled');\r\n                    classes.push('vfc-cursor-not-allowed');\r\n                }\r\n\r\n                if (day.hide) {\r\n                    classes.push('vfc-hide');\r\n                }\r\n\r\n                // Today date\r\n                if (day.isToday) {\r\n                    classes.push('vfc-today');\r\n                }\r\n\r\n                if (!day.hideLeftAndRightDays && !this.fConfigs.disabledDayNames.includes(dayOfWeekString)) {\r\n\r\n                    // Mark Date\r\n                    if (day.isMarked) {\r\n                        classes.push('vfc-marked');\r\n                    }\r\n\r\n                    // Date Range Marked\r\n                    if (this.fConfigs.markedDateRange.start && this.fConfigs.markedDateRange.end) {\r\n                        if (helpCalendar.getDateFromFormat(this.fConfigs.markedDateRange.start) <= helpCalendar.getDateFromFormat(day.date)\r\n                            && helpCalendar.getDateFromFormat(this.fConfigs.markedDateRange.end) >= helpCalendar.getDateFromFormat(day.date)) {\r\n                            classes.push('vfc-marked');\r\n                        }\r\n                    } else {\r\n\r\n                        // Only After Start Marked\r\n                        if (this.fConfigs.markedDateRange.start) {\r\n                            if (helpCalendar.getDateFromFormat(this.fConfigs.markedDateRange.start) <= helpCalendar.getDateFromFormat(day.date))\r\n                                classes.push('vfc-marked');\r\n                        }\r\n\r\n                        // Only Before End Marked\r\n                        if (this.fConfigs.markedDateRange.end) {\r\n                            if (helpCalendar.getDateFromFormat(this.fConfigs.markedDateRange.end) >= helpCalendar.getDateFromFormat(day.date))\r\n                                classes.push('vfc-marked');\r\n                        }\r\n                    }\r\n\r\n                    classes.push('vfc-hover');\r\n                }\r\n\r\n\r\n                // Date Mark With Custom Classes\r\n                if (typeof this.fConfigs.markedDates === \"object\") {\r\n                    let checkMarked = this.fConfigs.markedDates.find(function (markDate) {\r\n                        return markDate.date === day.date;\r\n                    });\r\n\r\n                    if (typeof checkMarked !== \"undefined\") {\r\n                        classes.push(checkMarked.class);\r\n                    }\r\n                }\r\n\r\n                if(day.date === this.calendar.dateRange.start || day.date === this.calendar.dateRange.end || day.date === this.calendar.selectedDate){\r\n                    classes.push('borderd');\r\n                }\r\n\r\n                return classes;\r\n            },\r\n            getTransition_() {\r\n                if(!this.fConfigs.transition)\r\n                    return '';\r\n\r\n                let name = '';\r\n                if(this.transitionPrefix === 'left'){\r\n                    name = 'vfc-calendar-slide-left';\r\n                }else if(this.transitionPrefix === 'right') {\r\n                    name = 'vfc-calendar-slide-right';\r\n                }\r\n                return name;\r\n            },\r\n        }\r\n    }\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n    .vfc-styles-conditional-class {\r\n        @import \"../assets/scss/calendar.scss\";\r\n    }\r\n</style>"]}]}